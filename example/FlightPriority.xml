<?xml version="1.0" encoding="UTF-8"?>
<Otds xmlns="http://otds-group.org/otds" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="2.0" xsi:schemaLocation="http://otds-group.org/otds ../xsd/otds.xsd" UpdateMode="New">
	<Products UpdateMode="New">
		<Tags UpdateMode="New">
			<!-- de: Hier sind beispielhaft verschiedene Möglichkeiten für sinnvolle Gruppierungen bzgl. der Flugpriorisierung aufgeführt. In der Praxis werden in der Regel nicht mehrere Gruppierungen nebeneinander stehen.-->
			<!-- en: Here are some examples of different possibilities for meaningful groupings with regard to flight prioritization. In practice, several groupings will usually not stand next to each other.-->
			<GenericTag Class="ReturnFlightGroupPrice" TagValueType="String">
				<!-- de: Dieses GenericTag definiert eine Gruppierung auf ReturnFlight-Ebene, welche die Returnflüge gruppiert und nach Preis aufsteigend sortiert. -->
				<!-- en: This GenericTag defines a grouping on ReturnFlight level, which groups the return flights and sorts them ascending by price. -->
				<SortedCandidateGroup>
					<GroupedByEqual>
						<CandidateInstance Source="descendants:Accommodation"/>
						<Tag Source="Outbound" Class="DepartureAirport"/>
						<Tag Source="Outbound" Class="ArrivalAirport"/>
					</GroupedByEqual>
					<Value>
						<Position>
							<Sequence>
								<Sort Order="Ascending">
									<Sum>
										<Price>
											<ConsideredPriceItems Source="Hierarchy.descendants:ReturnFlight"/>
										</Price>
									</Sum>
									<!-- de: in Version 1.0 konnte man mit der Source nur genau eine Component bzw. SubComponent referenzieren. Im Zuge der Referenzierung von Preisen wird das Source-Konstrukt um die "Hierarchy" erweitert, so dass auch Descendants und Ancestors eines Knoten mit einbezogen werden können. Eine genaue Beschreibung dazu finden Sie in der Doku wenn Sie nach dem Begriff Source-Range suchen. -->
									<!-- en: in version 1.0 only one component or subcomponent could be referenced with the Source. In the course of referencing prices, the Source construct is extended by the "Hierarchy" so that Descendants and Ancestors of a node can also be included. A detailed description can be found in the documentation if you search for the term source range. -->
								</Sort>
							</Sequence>
						</Position>
					</Value>
				</SortedCandidateGroup>
			</GenericTag>
			<GenericTag Class="StringIndexWithPADDING">
				<!-- de: Dieses GenericTag definiert einen Priorisierung nach einer Zeichenkette, die durch Paading auf eine Länge gebracht wird. -->
				<!-- en: This GenericTag defines a prioritization after a string, which is brought to a defined length by padding. -->
				<SortedCandidateGroup>
					<GroupedByEqual>
						<CandidateInstance Source="descendants:Accommodation"/>
						<Tag Source="Outbound" Class="DepartureAirport"/>
						<Tag Source="Outbound" Class="ArrivalAirport"/>
					</GroupedByEqual>
					<Value>
						<Position>
							<Sequence>
								<Sort Order="Ascending">
									<Concatenate Padding="_" PadLength="25">
										<Tag Source="ReturnFlight" Class="FlightStringIndex" TagValueType="String" Padding=" " PadLength="8"/>
									</Concatenate>
								</Sort>
							</Sequence>
						</Position>
					</Value>
				</SortedCandidateGroup>
			</GenericTag>
			<GenericTag Class="ReturnFlightGroupOutInIndex">
				<!-- de: Dieses GenericTag definiert eine Gruppierung auf ReturnFlight-Ebene, welche die Returnflüge gruppiert und zuerst nach einem numerischen Index an jedem Outbound aufsteigend sortiert und bei gleichem OutboundIndex danach nach numerischen InboundIndex sortiert. -->
				<!-- en: This GenericTag defines a grouping at ReturnFlight level that groups the return flights and first sorts them in ascending order according to a numerical index at each outbound and then sorts them according to a numerical inbound index for the same outbound index. -->

				<SortedCandidateGroup>
					<GroupedByEqual>
						<CandidateInstance Source="descendants:Accommodation"/>
						<Tag Source="Outbound" Class="DepartureAirport"/>
						<Tag Source="Outbound" Class="ArrivalAirport"/>
					</GroupedByEqual>
					<Value>
						<Position>
							<Sequence>
								<Sort Order="Ascending">
									<Sum>
										<Tag Source="Outbound" Class="FlightGroupIndex" TagValueType="Numeric"/>
									</Sum>
								</Sort>
								<Sort Order="Ascending">
									<Sum>
										<Tag Source="Inbound" Class="FlightGroupIndex" TagValueType="Numeric"/>
									</Sum>
								</Sort>
							</Sequence>
						</Position>
					</Value>
				</SortedCandidateGroup>
			</GenericTag>
			<GenericTag Class="ReturnFlightGroupOutIndexPrice">
				<!-- de: Diese GroupDefinition definiert eine Gruppierung auf ReturnFlight-Ebene, welche die Returnflüge gruppiert und zuerst nach einem Index an jedem Outbound aufsteigend sortiert und bei gleichem OutboundIndex danach nach dem Preis des Returnfluges sortiert. -->
				<!-- en: This GroupDefinition defines a grouping at ReturnFlight level, which groups the return flights and first sorts them according to an index at each outbound in ascending order and then sorts them according to the price of the return flight for the same outbound index. -->
				<SortedCandidateGroup>
					<GroupedByEqual>
						<CandidateInstance Source="descendants:Accommodation"/>
						<Tag Source="Outbound" Class="DepartureAirport"/>
						<Tag Source="Outbound" Class="ArrivalAirport"/>
					</GroupedByEqual>
					<Value>
						<Position>
							<Sequence>
								<Sort Order="Ascending">
									<Sum>
										<Tag Source="Outbound" Class="FlightGroupIndex" TagValueType="Numeric"/>
									</Sum>
								</Sort>
								<Sort Order="Ascending">
									<Sum>
										<Price>
											<ConsideredPriceItems Source="Hierarchy.descendants:ReturnFlight"/>
										</Price>
									</Sum>
								</Sort>
							</Sequence>
						</Position>
					</Value>
				</SortedCandidateGroup>
			</GenericTag>
			<GenericTag Class="ReturnFlightGroupOutInNumTextIndex">
				<!-- de: Dieses GenericTag definiert eine Gruppierung auf ReturnFlight-Ebene, welche die Returnflüge gruppiert und zuerst nach einem Index an jedem Outbound aufsteigend sortiert und bei gleichem OutboundIndex danach nach dem Preis des Returnfluges sortiert. -->
				<!-- en: This GenericTag defines a grouping at ReturnFlight level, which groups the return flights and first sorts them according to an index at each outbound in ascending order and then sorts them according to the price of the return flight for the same outbound index. -->
				<SortedCandidateGroup>
					<GroupedByEqual>
						<CandidateInstance Source="descendants:Accommodation"/>
						<Tag Source="Outbound" Class="DepartureAirport"/>
						<Tag Source="Outbound" Class="ArrivalAirport"/>
					</GroupedByEqual>
					<Value>
						<Position>
							<Sequence>
								<Sort Order="Ascending">
									<Sum>
										<Tag Source="Outbound" Class="FlightGroupIndex" TagValueType="Numeric"/>
									</Sum>
								</Sort>
								<Sort Order="Ascending">
									<Concatenate>
										<Tag Source="Outbound" Class="FlightCode" TagValueType="String"/>
									</Concatenate>
								</Sort>
								<Sort Order="Ascending">
									<Sum>
										<Tag Source="Inbound" Class="FlightGroupIndex" TagValueType="Numeric"/>
									</Sum>
								</Sort>
								<Sort Order="Ascending">
									<Concatenate>
										<Tag Source="Inbound" Class="FlightCode" TagValueType="String"/>
									</Concatenate>
								</Sort>
							</Sequence>
						</Position>
					</Value>
				</SortedCandidateGroup>
			</GenericTag>
			<GenericTag Class="ExampleCombinedIndicesPrices">
				<!-- de: Diese GroupDefinition entspricht keiner realen Priorisierung, sondern soll lediglich aufzeigen, welche Möglichkeiten es in OTDS gibt, Tags und Preise miteinander zu kombinieren um damit eine Sortierung zu definieren.-->
				<!-- en: This GroupDefinition does not correspond to a real prioritization, but should only show, which possibilities there are in OTDS to combine tags and prices with each other in order to define a sort order.-->
				<SortedCandidateGroup>
					<GroupedByEqual>
						<CandidateInstance Source="descendants:Accommodation"/>
						<Tag Source="Outbound" Class="DepartureAirport"/>
						<Tag Source="Outbound" Class="ArrivalAirport"/>
					</GroupedByEqual>
					<Value>
						<Position>
							<Sequence>
								<Sort Order="Ascending">
									<Sum>
										<Tag Source="Outbound" Class="FlightGroupIndex" TagValueType="Numeric"/>
										<Tag Source="Inbound" Class="FlightGroupIndex" TagValueType="Numeric"/>
									</Sum>
								</Sort>
								<Sort Order="Ascending">
									<Average>
										<Tag Source="Outbound" Class="FlightGroupIndex" TagValueType="Numeric"/>
										<Tag Source="Inbound" Class="FlightGroupIndex" TagValueType="Numeric"/>
									</Average>
								</Sort>
								<Sort Order="Ascending">
									<Sum>
										<Price>
											<ConsideredPriceItems Source="Hierarchy.descendants:ReturnFlight"/>
										</Price>
										<Tag Source="Inbound" Class="FlightGroupIndex" TagValueType="Numeric"/>
									</Sum>
								</Sort>
								<Sort Order="Ascending">
									<Average>
										<Price>
											<ConsideredPriceItems Source="Hierarchy.descendants:ReturnFlight"/>
										</Price>
										<Tag Source="Inbound" Class="FlightGroupIndex" TagValueType="Numeric"/>
									</Average>
								</Sort>
								<Sort Order="Ascending">
									<Concatenate>
										<Tag Source="Outbound" Class="FlightCode" TagValueType="String"/>
										<Tag Source="Inbound" Class="FlightCode" TagValueType="String"/>
									</Concatenate>
								</Sort>
							</Sequence>
						</Position>
					</Value>
				</SortedCandidateGroup>
			</GenericTag>
		</Tags>
		<GlobalValues>
			<GlobalValue Key="CityPairProduction">
				<ParameterSet Key="CityPairProduction">
					<FeatureContext>CityPairProduction</FeatureContext>
				</ParameterSet>
			</GlobalValue>
		</GlobalValues>
		<Product Key="Package" ProductType="FlightAccommodation" UpdateMode="New">
			<Tags UpdateMode="New">
				<Tag Class="Product" TagValueType="String">Pauschal</Tag>
			</Tags>
			<Booking>
				<BookingGroup Area="GlobalArea">
					<BookingParameter Field="TravelType">
						<Value>PAUS</Value>
					</BookingParameter>
				</BookingGroup>
				<BookingGroup Area="ServiceArea">
					<!-- de: Löscht unabhängig von der Priorisierung die Buchungszeile des InboundFluges. -->
					<!-- en: Deletes the booking line of the inbound flight regardless of the prioritization. -->
					<BookingReplace Source="Inbound"/>
				</BookingGroup>
				<BookingGroup Area="ServiceArea" Source="Outbound" Priority="1">
					<!-- de: Ersetzt den ServiceCode des Outboundfluges durch das CityPair, wenn der Flug die höchste Prio hat. -->
					<!-- en: Replaces the service code of the outbound flight with the CityPair if the flight has the highest priority. -->
					<BookingParameter Field="ServiceCode">
						<Tag Source="Outbound" Class="DepartureAirport"/>
					</BookingParameter>
					<BookingParameter Name="ServiceCode" Field="ServiceCode" Index="1">
						<Tag Source="Outbound" Class="ArrivalAirport"/>
					</BookingParameter>
					<BookingParameter Field="DateEnd">
						<!-- de: Ersetzt den Endtermin der Outboundflugzeile durch den Starttermin des Rückfluges. -->
						<!-- en: Replaces the end date of the outbound flight line with the start date of the return flight. -->
						<Date Source="Inbound" DayType="CheckIn"/>
					</BookingParameter>
					<Condition>
						<!--de: Dieser Bedingung sorgt dafür, dass falls eine Verarbeitung mit dem FeautureContext=CityPairProduction durchgeführt wird, die Flugcodes durch CityPairCodes ersetzt werden. Die Flughafencodes müssen dazu in den Flügen in entsprechenden Tags enthalten sein.   -->
						<!--en: This condition ensures that if processing is performed with the FeautureContext=CityPairProduction, the flight codes are replaced by CityPairCodes. The airport codes must be contained in the flights in corresponding tags.   -->
						<Keys Source="GlobalValue">CityPairProduction</Keys>
					</Condition>
				</BookingGroup>
			</Booking>
			<Components>
				<Accommodation DayAllocationLevel="0"/>
				<DefinedComponent UseRole="ReturnFlight" Name="ReturnFlight"/>
			</Components>
			<Filter Key="1">
				<And>
					<MatchEqual>
						<Element Source="Accommodation">CatchmentAirport</Element>
						<Element Source="ReturnFlight.Outbound">ArrivalAirport</Element>
					</MatchEqual>
					<Imply>
						<!-- de: Dieser Imply sorgt dafür, dass falls eine Verarbeitung mit dem FeatureContext="CityPairProduction" durchgeführt wird, nur das erste Angebot jeder Fluggruppe gültig ist.   -->
						<!-- en: This imply ensures that if processing is performed with the FeatureContext="CityPairProduction", only the first offer of each flight group is valid.   -->
						<If>
							<Keys Source="GlobalValue">CityPairProduction</Keys>
						</If>
						<Then>
							<GenericTag Class="CityPairGrouping">
								<MaxValue>1</MaxValue>
							</GenericTag>
						</Then>
					</Imply>
				</And>
			</Filter>
		</Product>
	</Products>
	<Brands>
		<Brand Key="YYY">
			<Booking>
				<BookingGroup Area="GlobalArea">
					<BookingParameter Field="BrandCode">
						<Value>YYY</Value>
					</BookingParameter>
				</BookingGroup>
				<BookingGroup EvaluationBase="Person" Area="PersonArea">
					<BookingParameter Field="Title">
						<Value>H</Value>
					</BookingParameter>
					<Condition>
						<And>
							<Impact>
								<ConditionalTags Source="global:SellingAccom" Class="PersonType">Adult</ConditionalTags>
							</Impact>
							<PersonImpact>
								<PersonGenders Source="Product">Male Undefined</PersonGenders>
							</PersonImpact>
						</And>
					</Condition>
				</BookingGroup>
			</Booking>
		</Brand>
	</Brands>
	<Accommodations>
		<Accommodation Key="1">
			<SellingAccom Key="1">
				<Tags>
					<Tag Class="Reiseart">BAUS</Tag>
				</Tags>
				<Booking/>
				<Board Key="Board"/>
				<Unit Key="1">
					<SellingUnit Key="1">
						<Booking/>
						<Occupancy Key="1">
							<Person>
								<MinCount>1</MinCount>
							</Person>
						</Occupancy>
					</SellingUnit>
				</Unit>
			</SellingAccom>
		</Accommodation>
	</Accommodations>
	<Flights>
		<OnewayFlights>
			<OnewayFlight Key="DUSPMI20130212K1">
				<Tags>
					<Tag Class="DepartureAirport">DUS</Tag>
					<Tag Class="ArrivalAirport">PMI</Tag>
					<Tag Class="FlightGroupIndex" TagValueType="Numeric">1</Tag>
					<Tag Class="FlightCode">DUSPMIK1</Tag>
				</Tags>
				<Booking>
					<BookingGroup Area="ServiceArea" Source="OnewayFlight">
						<BookingParameter Field="ServiceCode">
							<Value>DUSPMIK1</Value>
						</BookingParameter>
					</BookingGroup>
				</Booking>
				<DepartureAirport>DUS</DepartureAirport>
				<ArrivalAirport>PMI</ArrivalAirport>
				<BookingClass Key="Y">
					<PriceItems Key="1">
						<PriceItem Class="Gesamtpreis">
							<Absolute>
								<Value>105</Value>
								<DayBase>x</DayBase>
								<PersonBase>1</PersonBase>
							</Absolute>
						</PriceItem>
					</PriceItems>
				</BookingClass>
			</OnewayFlight>
			<OnewayFlight Key="DUSPMI20130212K2">
				<Tags>
					<Tag Class="DepartureAirport">DUS</Tag>
					<Tag Class="ArrivalAirport">PMI</Tag>
					<Tag Class="FlightGroupIndex" TagValueType="Numeric">2</Tag>
					<Tag Class="FlightCode">DUSPMIK2</Tag>
				</Tags>
				<Booking>
					<BookingGroup Area="ServiceArea" Source="OnewayFlight">
						<BookingParameter Field="ServiceCode">
							<Value>DUSPMIK2</Value>
						</BookingParameter>
					</BookingGroup>
				</Booking>
				<DepartureAirport>DUS</DepartureAirport>
				<ArrivalAirport>PMI</ArrivalAirport>
				<BookingClass Key="Y">
					<PriceItems Key="1">
						<PriceItem Class="Gesamtpreis">
							<Absolute>
								<Value>110</Value>
								<DayBase>x</DayBase>
								<PersonBase>1</PersonBase>
							</Absolute>
						</PriceItem>
					</PriceItems>
				</BookingClass>
			</OnewayFlight>
			<OnewayFlight Key="DUSPMI20130212K3">
				<Tags>
					<Tag Class="DepartureAirport">DUS</Tag>
					<Tag Class="ArrivalAirport">PMI</Tag>
					<Tag Class="FlightGroupIndex" TagValueType="Numeric">3</Tag>
					<Tag Class="FlightCode">DUSPMIK3</Tag>
				</Tags>
				<Booking>
					<BookingGroup Area="ServiceArea" Source="OnewayFlight">
						<BookingParameter Field="ServiceCode">
							<Value>DUSPMIK3</Value>
						</BookingParameter>
					</BookingGroup>
				</Booking>
				<DepartureAirport>DUS</DepartureAirport>
				<ArrivalAirport>PMI</ArrivalAirport>
				<BookingClass Key="Y">
					<PriceItems Key="1">
						<PriceItem Class="Gesamtpreis">
							<Absolute>
								<Value>115</Value>
								<DayBase>x</DayBase>
								<PersonBase>1</PersonBase>
							</Absolute>
						</PriceItem>
					</PriceItems>
				</BookingClass>
			</OnewayFlight>
			<OnewayFlight Key="PMIDUS20130220K1">
				<Tags>
					<Tag Class="DepartureAirport">PMI</Tag>
					<Tag Class="ArrivalAirport">DUS</Tag>
					<Tag Class="FlightGroupIndex" TagValueType="Numeric">1</Tag>
					<Tag Class="FlightCode">PMIDUSK1</Tag>
				</Tags>
				<Booking>
					<BookingGroup Area="ServiceArea" Source="OnewayFlight">
						<BookingParameter Field="ServiceCode">
							<Value>PMIDUSK1</Value>
						</BookingParameter>
					</BookingGroup>
				</Booking>
				<DepartureAirport>PMI</DepartureAirport>
				<ArrivalAirport>DUS</ArrivalAirport>
				<BookingClass Key="Y">
					<PriceItems Key="1">
						<PriceItem Class="Gesamtpreis">
							<Absolute>
								<Value>105</Value>
								<DayBase>x</DayBase>
								<PersonBase>1</PersonBase>
							</Absolute>
						</PriceItem>
					</PriceItems>
				</BookingClass>
			</OnewayFlight>
			<OnewayFlight Key="PMIDUS20130220K2">
				<Tags>
					<Tag Class="DepartureAirport">PMI</Tag>
					<Tag Class="ArrivalAirport">DUS</Tag>
					<Tag Class="FlightGroupIndex" TagValueType="Numeric">2</Tag>
					<Tag Class="FlightCode">PMIDUSK2</Tag>
				</Tags>
				<Booking>
					<BookingGroup Area="ServiceArea" Source="OnewayFlight">
						<BookingParameter Field="ServiceCode">
							<Value>PMIDUSK2</Value>
						</BookingParameter>
					</BookingGroup>
				</Booking>
				<DepartureAirport>PMI</DepartureAirport>
				<ArrivalAirport>DUS</ArrivalAirport>
				<BookingClass Key="Y">
					<PriceItems Key="1">
						<PriceItem Class="Gesamtpreis">
							<Absolute>
								<Value>110</Value>
								<DayBase>x</DayBase>
								<PersonBase>1</PersonBase>
							</Absolute>
						</PriceItem>
					</PriceItems>
				</BookingClass>
			</OnewayFlight>
			<OnewayFlight Key="PMIDUS20130220K3">
				<Tags>
					<Tag Class="DepartureAirport">PMI</Tag>
					<Tag Class="ArrivalAirport">DUS</Tag>
					<Tag Class="FlightGroupIndex" TagValueType="Numeric">3</Tag>
					<Tag Class="FlightCode">PMIDUSK3</Tag>
				</Tags>
				<Booking>
					<BookingGroup Area="ServiceArea" Source="OnewayFlight">
						<BookingParameter Field="ServiceCode">
							<Value>PMIDUSK3</Value>
						</BookingParameter>
					</BookingGroup>
				</Booking>
				<DepartureAirport>PMI</DepartureAirport>
				<ArrivalAirport>DUS</ArrivalAirport>
				<BookingClass Key="Y">
					<PriceItems Key="1">
						<PriceItem Class="Gesamtpreis">
							<Absolute>
								<Value>115</Value>
								<DayBase>x</DayBase>
								<PersonBase>1</PersonBase>
							</Absolute>
						</PriceItem>
					</PriceItems>
				</BookingClass>
			</OnewayFlight>
		</OnewayFlights>
	</Flights>
	<DefinedComponents>
		<DefineComponent Key="ReturnFlight" Role="ReturnFlight">
			<Components>
				<CombiComponent Role="Outbound">
					<OnewayFlight/>
				</CombiComponent>
				<CombiComponent Role="Inbound">
					<OnewayFlight/>
				</CombiComponent>
			</Components>
			<Filter Key="1">
				<And>
					<Or>
						<MatchEqual>
							<Tag Source="Outbound" Class="Airline"/>
							<Tag Source="Inbound" Class="Airline"/>
						</MatchEqual>
						<And>
							<Date Source="Outbound" DayType="CheckIn">
								<Min>2013-03-22</Min>
								<Max>2013-10-31</Max>
							</Date>
							<Date Source="Inbound" DayType="CheckIn">
								<Min>2013-03-29</Min>
								<Max>2013-10-31</Max>
							</Date>
							<Tags Source="Outbound" Class="Airline">AB DE XQ XG</Tags>
							<Tags Source="Inbound" Class="Airline">AB DE XQ XG</Tags>
							<Airports Source="Outbound" AirportType="Arrival">AYT FUE</Airports>
						</And>
					</Or>
					<MatchEqual>
						<Tag Source="Outbound" Class="PauLi"/>
						<Tag Source="Inbound" Class="PauLi"/>
					</MatchEqual>
					<MatchEqual>
						<Element Source="Outbound">ArrivalAirport</Element>
						<Element Source="Inbound">DepartureAirport</Element>
					</MatchEqual>
					<MatchEqual>
						<Element Source="Inbound">ArrivalAirport</Element>
						<Element Source="Outbound">DepartureAirport</Element>
					</MatchEqual>
				</And>
			</Filter>
		</DefineComponent>
	</DefinedComponents>
</Otds>
