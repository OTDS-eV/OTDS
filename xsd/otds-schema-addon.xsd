<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="http://otds-group.org/otds" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:internal="http://otds-group.org/otds/internal" targetNamespace="http://otds-group.org/otds" elementFormDefault="qualified">
	<xs:include schemaLocation="otds-schema-common.xsd"/>
	<xs:complexType name="AddonsType">
		<xs:complexContent>
			<xs:extension base="CompositeUpdateNodeType">
				<xs:annotation>
					<xs:documentation xml:lang="de" xml:id="de_00031">Reisekomponente für Zusatzangebote (Addons). 
Zusatzangebote sind z.B. der Transfer, Sportangebote, Gesundheits- oder Wellnessleistungen, besonderer Hotelservice oder besondere touristische Angebote. 
Hier werden alle dazugehörigen Daten und Eigenschaften erfasst inkl. der Preise und Verfügbarkeiten.</xs:documentation>
					<xs:documentation xml:lang="en" xml:id="en_00031">Travel components for additional offers (Addons).
Additional offers can be, for example, transfers, sporting activities, health and spa services, special hotel services or other additional tourist offers.
All associated information and properties are included here, such as price and availability.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="Addon" type="BaseAddonType" maxOccurs="unbounded"/>
					<xs:element name="AddonWrapper" type="WrapperType" minOccurs="0" maxOccurs="unbounded" internal:otdsversion="2.0">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00548">Die AddonWrapper definieren eine zusätzliche Instanz zwischen der ComponentenInstanz "Addons" und der eigentlichen "Addon"-Komponente. In der Produktregel oder in DefinedComponents können hierarchische Abhängigkeiten zwischen den AddonWrappern und den Addons festgelegt werden. AddonWrapper werden dazu benutzt, die Abhängigkeit zwischen mehreren Addons bei Addon-Paketen abzubilden. Mehr Details hierzu finden Sie in der Dokumentation unter dem Schlagwort "Wrapper-Komponenten" und in Beispiel "WrapperComponent_Examples.xml".</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00548">The AddonWrapper define an additional instance between the ComponentInstance "Addons" and the actual "Addon" component. In the product rule or in DefinedComponents hierarchical dependencies between AddonWrapper and Addons can be defined. AddonWrapper are being used in order to describe the dependency between several Addons in Addon-packets. For more details please refer to the keyword "Wrapper Components" in the documentation and to the example "WrapperComponent_Examples.xml".</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="PriceItems" type="PriceItemsType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00004">Global gültige Preisbestandteile der Zusatzleistungen</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00004">Globally valid PriceItems for addons</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BaseAddonType">
		<xs:annotation>
			<xs:documentation xml:lang="de" xml:id="de_00033">In diesem Element wird definiert welche zusätzlichen Leistungen in dem Produkt enthalten sein können. Leistungen die sich auf die Buchungszeilen der Accommodation auswirken zum Beispiel durch Änderung des Hotel oder Zimmer Buchungscodes müssen zwingend hier platziert werden.</xs:documentation>
			<xs:documentation xml:lang="en" xml:id="en_00033">This element defines what add-ons are available with the product. It is obligatory to put services here that have an impact on the Accommodation booking details, by changing the hotel or room booking code for example.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="MultipleCompositeUpdateNodeWithTagsType">
				<xs:sequence>
					<xs:element name="Booking" type="BookingType" minOccurs="0">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00034">In diesem Element werden alle Values zusammengefasst, die zum Buchen notwendig sind. Später können über den BookingEntry andere Namespaces ergänzt werden, so das spezifisch für verschiedene Buchungssysteme Values zusammen mit dem dazugehörenden Parameternamen angegeben werden können.</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00034">In this element, all values ​​required for booking are combined. Other namespaces can later be added to the BookingEntry, so that values specific to different booking systems are specified along with their corresponding parameter names​​.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<!---->
					<xs:element name="CheckOutDateOffset" type="CheckOutDateOffsetType" minOccurs="0">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00035">This defines, if an addon has a fixed duration interval. In case this element is missing the addon can have flexibel durations like an accommodation generally has.  </xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00035">This defines whether an addon has a fixed duration interval. If this element missing, the addon can have flexible durations as accommodation generally has.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Properties" type="PropertiesType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00036">In diesem Element können Attribute für den Service hinterlegt werden.</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00036">Attributes for the service can be entered in this element.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="ServiceFeature" type="ServiceFeatureType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00037">ServiceFeatures können definierte Services um bestimmte Eigenschaften erweitern und somit durch Ausmultiplizieren neue Addon-Angebote generieren.
							</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00037">ServiceFeatures can expand defined services to include certain properties and thus generate new add-on offers.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Service" type="ServiceType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00038">In diesem Element werden die verschiedenen Ausprägungen des AddonServices aufgeführt.
										</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00038">In this element various characteristics of the add-on services are listed.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Filter" type="FilterSimpleNodeType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00039">In diesem Element können Einschränkungnen bzgl. der Gültigkeit der AddonServices definiert werden. </xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00039">In this element restrictions regarding the validity of the add-on services are defined.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="PriceItems" type="PriceItemsType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00040">Preisberechnung der Zusatzleistungen auf Unterbringungsebene</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00040">Pricing of add-ons at the accommodation level</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="CatchmentAirports" type="SimpleNodeIataAirportCodeListType" minOccurs="0">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00041">Alle Flughäfen, die im Einzugsgebiet des Addons liegen.
Angaben erfolgen als (IATA Airport-Code bzw. IATA MAA-Code). Es ist in Form einer XML-List auch die Angabe mehrerer Flughäfen durch Space getrennt möglich.

Spezialfall: wenn der Code sowohl einen konkreten Flughafen als auch eine Flughafengruppe (MAA - Metropolitan Airport Code) identifiziert, wird nur der konkrete Flughafen berücksichtigt. 

Um die Definition der Airport-Codes seitens IATA zu überprüfen, nutzen Sie bitte den Link: http://www.iata.org/publications/Pages/code-search.aspx

Eine nicht zwingend vollständige und nicht zwingend korrekte Liste der IATA-Airport-Codes finden Sie unter: https://de.wikipedia.org/wiki/Liste_der_IATA-Flughafen-Codes

Eine nicht zwingend vollständige und nicht zwingend korrekte Liste der MAA-Codes finden Sie unter: http://wikitravel.org/en/Metropolitan_Area_Airport_Codes</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00041">All airports situated in the catchment area of the add-on.
Information is given as (IATA airport code or IATA MAA Code). It is also possible, in the form of an XML list, to specify several airports using a space between each.
Special case: if the code identifies both, a real airport and a group of airports (MAA - Metropolitan Airport Code), only the real airport is considered.

For information about the IATA airport code definition see: http://www.iata.org/publications/Pages/code-search.aspx
					    
You will find a list of the concrete airport codes that is not garanteed to be complete or correct here: https://de.wikipedia.org/wiki/Liste_der_IATA-Flughafen-Codes
					    
You will find a list of the MAA-Codes  that is not garanteed to be complete or correct here: http://wikitravel.org/en/Metropolitan_Area_Airport_Codes</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="NeighbourComponentCorrection" type="NeighbourComponentCorrectionType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="det" xml:id="de_00042">In diesem Zweig können außergewöhnliche Auswirkungen auf den CheckIn und CheckOut der angrenzenden Komponenten definiert werden. Aktuell kennen wir nur Fälle bei Flügen. Hier betrifft es Flüge, die sehr früh an einem Tag ankommen oder sehr spät an einem Tag abfliegen. Normalerweise reihen sich CheckIn und CheckOuts von benachbarten Componenten lückenlos aneinander. Mit Hilfe der NeighbourComponentCorrection kann man eine Lücke bzw. mit negativen Werten eine Überlappung zwischen beanchbarten Komponenten definieren. Seit Version 2.0 ist es nun möglich, dass man einer NeighbourComponentCorrection eine Condition mitgibt. Anwendungsfall ist, wenn die Anwendung der NeighbourComponentCorrection nur unter bestimmten Bedingungen erfüllen soll. 
							
Bzgl. der Impact-Bedingungen erfolgt die Auswertung der Condition analog zu den Filtern durch Anwendung eines umhüllenden "NonImpact", auch wenn dieser nicht explizit angegeben ist.

Falls nach der Auswertung der Condition identische "NeighbourComponentCorrection/CheckInDateOffset/@Component" bzw. "NeighbourComponentCorrection/CheckOutDateOffset/@Component" vorhanden sind, so wird jeweils das in XML-Order erste davon benutzt.
Die Auswertung der NeighbourComponentCorrections erfolgt durch Iteration aller möglicher Condition-Varianten. 

Die Conditions in den NeighbourComponentCorrections (im folgenden NCC genannt) können Termin-Bedingungen enthalten, die wiederum durch die NCC beeinflusst werden, was einen Zirkelbezug bedeuten würde. Dieser Zirkelbezug wird durch folgende Vorgehensweise vermieden:
Sind NCC mit Condition vorhanden, so wird formal jede mögliche Variante von NCC-Kombinationen (incl. alle Conditions sind False, also keine NCC mit Conditions) angewendet.
Für jede der so erhaltenen Angebotskandidaten wird geprüft, ob die zugrundeliegenden Annahmen bzgl. der NCC-Conditions erfüllt sind.
Wird mindestens eine Annahme nicht erfüllt, so wird der Angebots-Kandidat verworfen. 
Diese Art der Verarbeitung definiert auch das Verhalten bei terminabhängigen Conditions korrekt. Im Normalfall (also keine terminabhängigen Conditions) kann praktisch die Auswertung auch direkt vorgenommen werden.</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00042">In this branch the exceptional effects on the CheckIn and CheckOut of adjacent components can be defined. We are currently only aware of flight implications. This concerns flights arriving very early or leaving very late on any particular day. In this branch one can specify that CheckIn should be brought forward or the CheckOut put back for a day. Since Version 2.0 it is possible to add a NeighbourComponentCorrection to a condition. This might for example be necessary, when a change caused by a late flight is not desired for specific hotels.
Regarding the impact conditions the evaluation of the condition takes place analoguous to the filters by applying a wrapping "NonImpact", even if it is not indicated explicitly. If after the evaluation of the condition the identical  "NeighbourComponentCorrection/CheckInDateOffset/@Component" repectively the "NeighbourComponentCorrection/CheckOutDateOffset/@Component" exists, then the first one in the xml-order is used.
The evaluation of the NeighbourComponentCorrections takes place by iterating all condition variants possible. The conditions in the NeighbourComponentCorrections (hereafter called NCC) may contain date-conditions, which are in turn influenced by the NCC, which would lead to a circular reference.
This circular reference is avoided by the following approach:
In the case that NCC with conditions exist, formally each possible variant of NCC combination is applied (including all conditions are False, hence no NCC with conditions).
For each of the offer candidates resulting by this, it is evaluated, if the underlying assumptions regarding the NCC conditions are fulfilled.
If at least one assumption is not fulfilled, the offer candidate is dismissed.
This approach for processing also defines the behaviour for date-dependent conditions correctly. Normally (hence no date-dependent conditions) the evaluation can be carried out directly.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Availabilities" type="AvailabilitiesType" minOccurs="0" maxOccurs="unbounded" internal:otdsversion="2.0">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00084">Unter diesem Zweig werden die Verfügbarkeiten eines Objektes definiert. Fehlt der Zweig, so gelten alle Termine und Dauern als nicht verfügbar, sofern diese nicht schon an anderer Stelle als verfügbar definiert wurden. Die Ebene "Availabilities" definiert, welche Art der Verfügbarkeits-Steuerung vorliegt. Wenn zum Beispiel eine Steuerung der Verfügbarkeiten über die Dauer stattfindet, so wird es je eingeschränkter Dauer einen eigenen Availabilities-Zweig mit einer entsprechenden Dauerbedingung unter "Conditions" geben. In der Regel sollte der Key des Availabilities-Knoten genau mit dieser Condition korrelieren, damit der Key für inkrementelle Updates immer eindeutig reproduzierbar ist.  
							
Bitte beachten Sie: Es muss auch immer der letzte mögliche CheckOut-Termin in der Availability enthalten sein.

Dies hat am Ende der Saison und auch bei Übernachtflügen zur Folge, dass dieser letzte CheckOut-Termin in der Availability in der Regel explizit ergänzt werden muss mit der Möglichkeit an diesem Termin auszuchecken, obwohl eine Übernachtung an dem Termin nicht mehr möglich ist.
Availabilities können auf vielen unterschiedlichen Ebenen definiert werden. Wie diese Ebenen bei mehrfacher Definition von Availabilties zusammengefasst werden, können Sie in der OTDS-Dokumentation nachlesen. Benutzen Sie dort die Suchfunktion und suchen nach "Availability".</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00084">Under this branch the availability of the accommodation is defined. If this branch is omitted, all dates and durations will be considered unavailable unless they are already defined elsewhere as available. The "Availabilities" layer defines which kind of availability management is possible. For example, if availabilities are managed according to duration, each restricted duration will have its own Availabilities branch with corresponding permanent duration restriction under "Conditions". As a rule, the key to the Availabilities node correlates exactly with this condition, so that the key for incremental updates is always clearly reproducible.
							
Please note: the last possible CheckOut-date must also always be included in the Availability. 

At the end of the season and also for overnight flights this leads to the general necessity to explicitly add this last CheckOut-date in the Availability ioncluding the possibility to check out on this date, although an overnight stay is no longer possible on this date.

Availabilities may be defined on various different layers. How those layers can be merged in the case of multiple definition of availabilites is covered in the OTDS documentation. Please use the search mode and inquire for "Availability".</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ServiceType">
		<xs:complexContent>
			<xs:extension base="MultipleCompositeUpdateNodeWithTagsType">
				<xs:sequence>
					<xs:element name="Booking" type="BookingType" minOccurs="0">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00043">In diesem Element werden alle Values zusammengefasst, die zum Buchen notwendig sind. Später können über den BookingEntry andere Namespaces ergänzt werden, so das spezifisch für verschiedene Buchungssysteme Values zusammen mit dem dazugehörenden Parameternamen angegeben werden können.</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00043">In this element, all values ​​required for booking are combined. Other namespaces can later be added to the BookingEntry, so that values specific to different booking systems are specified along with their corresponding parameter names​​.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Properties" type="PropertiesType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00044">Beschreibung der Zusatzleistungen</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00044">Description of the additional services</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Occupancy" type="OccupancyType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00045">Die dem Addon zugeordnete Belegung. Hier kann die Mindestanforderung für die Reisenden definiert werden. Fehlt der Zweig Occupancy, so gibt es keine Einschränkungen bzgl. der Reisenden.</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00045">The occupancy or participation associated with the addon. Here, the minimum occupancy/participation requirement is defined. Where the Addon branch is absent there are no restrictions regarding the number of travellers.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Filter" type="FilterSimpleNodeType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00046">Regeln, für die die Zusatzleistungen gelten.</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00046">Rules that apply for add-ons.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="PriceItems" type="PriceItemsType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00047">Preisberechnung der Zusatzleistungen</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00047">Pricing for the add-ons</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Availabilities" type="AvailabilitiesType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00048">Unter diesem Zweig werden die Verfügbarkeiten eines Addons definiert. Fehlt der Zweig, so gelten alle Termine und Dauern als verfügbar, sofern diese nicht schon an anderer Stelle eingeschränkt wurden. 

Die Ebene Availabilities definiert, welche Art der Verfügbarkeits-Steuerung vorliegt. Wenn zum Beispiel eine Steuerung der Verfügbarkeiten über die Dauer stattfindet, so wird es je eingeschränkter Dauer einen eigenen Availabilities-Zweig mit einer entsprechenden Dauerbedingung unter "Conditions" geben. In der Regel sollte der Key des Availabilities-Knoten genau mit dieser Condition korrelieren, damit der Key für inkrementelle Updates immer eindeutig reproduzierbar ist.  
							
Bitte beachten Sie: Es muss auch immer der letzte mögliche CheckOut-Termin in der Availability enthalten sein.

Dies hat am Ende der Saison und auch bei Übernachtflügen zur Folge, dass dieser letzte CheckOut-Termin in der Availability in der Regel explizit ergänzt werden muss mit der Möglichkeit, an diesem Termin auszuchecken.</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00048">Under this branch the availability of the Addon is defined. If this branch is omitted, all dates and durations are considered available unless already restricted elsewhere. 
							
The Availabilities level defines which kind of availability management is possible. For example, where restricted durations are specified under the Availabilities branch, corresponding permanent restrictions will be produced under "Conditions". As a rule, the key to the Availabilities node correlates with this condition, so that the key for incremental updates is always clearly reproducible.

Please note: the last possible CheckOut-date must also always be included in the Availability. 

At the end of the season and also for overnight flights this leads to the general necessity to explicitly add this last CheckOut date in the Availability including the possibility to check out on this date.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ServiceFeatureType">
		<xs:annotation>
			<xs:documentation xml:lang="de" xml:id="de_00049">Definition der ServiceFeatures</xs:documentation>
			<xs:documentation xml:lang="en" xml:id="en_00049">Definition of ServiceFeatures</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="MultipleCompositeUpdateNodeWithTagsType">
				<xs:sequence>
					<xs:element name="Booking" type="BookingType">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00050">In diesem Element werden alle Daten zusammengefasst, die zum Buchen notwendig sind. Später können über den BookingEntry andere Namespaces ergänzt werden, so das spezifisch für verschiedene Buchungssysteme Werte zusammen mit dem dazugehörenden Parameternamen angegeben werden können.</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00050">In this element, all values ​​required for booking are combined. Other namespaces can later be added to the BookingEntry, so that values specific to different booking systems are specified along with their corresponding parameter names​​.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Properties" type="PropertiesType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00051">Genauere Spezifizierung des ServiceFeatures</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00051">More detailed specification of the ServiceFeatures</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Filter" type="FilterSimpleNodeType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00052">Einschränkungen in Bezug auf das ServiceFeature</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00052">Restrictions on the ServiceFeature</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="PriceItems" type="PriceItemsType" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation xml:lang="de" xml:id="de_00053">Preisbestandteile für das ServiceFeature</xs:documentation>
							<xs:documentation xml:lang="en" xml:id="en_00053">Price components for the ServiceFeature</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
</xs:schema>
